"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Sets a request header with the value of a cookie from document.cookie, if it exists
 */
var _default = function _default() {
  var cookieName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csrfToken';
  var headerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x-csrf-token';
  return function CsrfMiddleware() {
    var REGEXP_COOKIE_NAME = new RegExp(cookieName + '[^;]+');
    var getCookie = function getCookie() {
      var cookieString = REGEXP_COOKIE_NAME.exec((document || {}).cookie || '');
      return cookieString ? decodeURIComponent(cookieString.toString().replace(/^[^=]+./, '')) : undefined;
    };
    return {
      prepareRequest: function prepareRequest(next) {
        return _asyncToGenerator(function* () {
          var request = yield next();
          if (typeof document === 'undefined') {
            return request;
          }
          var csrf = getCookie();
          return !csrf ? request : request.enhance({
            headers: _defineProperty({}, headerName, csrf)
          });
        })();
      }
    };
  };
};
exports["default"] = _default;